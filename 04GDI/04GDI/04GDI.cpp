// 04GDI.cpp : 定义应用程序的入口点。
//

#include "stdafx.h"
#include "04GDI.h"

#define MAX_LOADSTRING 100

// 全局变量: 
HINSTANCE hInst;                                // 当前实例
WCHAR szTitle[MAX_LOADSTRING];                  // 标题栏文本
WCHAR szWindowClass[MAX_LOADSTRING];            // 主窗口类名

// 此代码模块中包含的函数的前向声明: 
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    // TODO: 在此放置代码。

    // 初始化全局字符串
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_MY04GDI, szWindowClass, MAX_LOADSTRING);
    MyRegisterClass(hInstance);

    // 执行应用程序初始化: 
    if (!InitInstance (hInstance, nCmdShow))
    {
        return FALSE;
    }

    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_MY04GDI));

    MSG msg;

    // 主消息循环: 
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    return (int) msg.wParam;
}



//
//  函数: MyRegisterClass()
//
//  目的: 注册窗口类。
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style          = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc    = WndProc;
    wcex.cbClsExtra     = 0;
    wcex.cbWndExtra     = 0;
    wcex.hInstance      = hInstance;
    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MY04GDI));
    wcex.hCursor        = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);
    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_MY04GDI);
    wcex.lpszClassName  = szWindowClass;
    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

    return RegisterClassExW(&wcex);
}

//
//   函数: InitInstance(HINSTANCE, int)
//
//   目的: 保存实例句柄并创建主窗口
//
//   注释: 
//
//        在此函数中，我们在全局变量中保存实例句柄并
//        创建和显示主程序窗口。
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   hInst = hInstance; // 将实例句柄存储在全局变量中

   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);

   if (!hWnd)
   {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   return TRUE;
}

//
//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  目的:    处理主窗口的消息。
//
//  WM_COMMAND  - 处理应用程序菜单
//  WM_PAINT    - 绘制主窗口
//  WM_DESTROY  - 发送退出消息并返回
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
#define SEGMENTS  500
#define PI 3.1415923

	switch (message)
    {
    case WM_COMMAND:
        {
            int wmId = LOWORD(wParam);
            // 分析菜单选择: 
            switch (wmId)
            {
            case IDM_ABOUT:
                DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
                break;
            case IDM_EXIT:
                DestroyWindow(hWnd);
                break;
            default:
                return DefWindowProc(hWnd, message, wParam, lParam);
            }
        }
        break;
    case WM_PAINT:
        {
			PAINTSTRUCT ps;
			HDC hdc = hdc = BeginPaint(hWnd, &ps);
			RECT rt;

			HPEN hPen = (HPEN)::GetStockObject(NULL_PEN);
			::SelectObject(hdc, hPen);
			int cxClient, cyClient;
			int x, y;
			POINT pt[SEGMENTS];

            // 取得窗口客户区的大小
			GetClientRect(hWnd, &rt);
			cxClient = rt.right - rt.left;
			cyClient = rt.bottom - rt.top;

			HBITMAP hBitmap = (HBITMAP)LoadImage(NULL, _T("Bitmap.bmp"), IMAGE_BITMAP, cxClient/2, cyClient/2, LR_LOADFROMFILE);
			HBRUSH brush1 = ::CreatePatternBrush(hBitmap);
			::SelectObject(hdc, brush1);
			Rectangle(hdc, 0, 0, cxClient / 2, cyClient / 2);

			HBRUSH brush2 = ::CreateSolidBrush(RGB(59, 67, 78));
			::SelectObject(hdc, brush2);
			Rectangle(hdc, cxClient / 2, 0, cxClient, cyClient / 2);

			HBRUSH brush3 = ::CreateSolidBrush(RGB(78, 100, 52));
			::SelectObject(hdc, brush3);
			Rectangle(hdc, 0, cyClient / 2, cxClient / 2, cyClient);

			HBRUSH brush4 = ::CreateSolidBrush(RGB(68, 7, 101));
			::SelectObject(hdc, brush4);
			Rectangle(hdc, cxClient / 2, cyClient / 2, cxClient, cyClient);


			// 画sin()
			SelectObject(hdc, (HPEN)::GetStockObject(BLACK_PEN));
			// 画横坐标轴
			MoveToEx(hdc, cxClient / 2, cyClient/4, NULL);
			LineTo(hdc, cxClient, cyClient/4);
			// 找出500个点的坐标
			for (size_t i = 0; i < SEGMENTS; i++)
			{
				pt[i].x = cxClient/2 *i / SEGMENTS + cxClient/2;
				pt[i].y = (cyClient / 4) * (1 - sin(2 * PI * i / SEGMENTS));
			}
			// 将各店连在一起
			Polyline(hdc, pt, SEGMENTS);

			// 画椭圆
			SelectObject(hdc, (HBRUSH)::GetStockObject(NULL_BRUSH));
			Ellipse(hdc, 0, cyClient / 2, cxClient / 2, cyClient);

			// 画多边形
			POINT lpPoint[6];
			for (size_t i = 0; i < sizeof(lpPoint); i++)
			{
				lpPoint[i].x = cxClient/4.0 * cos(i * PI / 3.0 + PI / 6.0) + cxClient * 3 / 4.0;
                 lpPoint[i].y =  cyClient / 4.0 * sin(i * PI / 3.0 + PI / 6.0) + cyClient * 3 / 4.0;
			}
			  Polygon(hdc, lpPoint, sizeof(lpPoint));

			EndPaint(hWnd, &ps);
			return 0;
        }
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// “关于”框的消息处理程序。
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
    UNREFERENCED_PARAMETER(lParam);
    switch (message)
    {
    case WM_INITDIALOG:
        return (INT_PTR)TRUE;

    case WM_COMMAND:
        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
        {
            EndDialog(hDlg, LOWORD(wParam));
            return (INT_PTR)TRUE;
        }
        break;
    }
    return (INT_PTR)FALSE;
}
